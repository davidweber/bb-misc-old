diff --git a/arch/arm/mach-omap2/board-omap3beagle.c b/arch/arm/mach-omap2/board-omap3beagle.c
index dd6e31f..e5dcaee 100644
--- a/arch/arm/mach-omap2/board-omap3beagle.c
+++ b/arch/arm/mach-omap2/board-omap3beagle.c
@@ -88,6 +88,26 @@ static u8 omap3_beagle_get_rev(void)
 	return omap3_beagle_version;
 }
 
+/*
+ * Board-specific configuration
+ * Defaults to BeagleBoard-xMC
+ */
+static struct {
+       int mmc1_gpio_wp;
+       int usb_pwr_level;
+       int reset_gpio;
+       int usr_button_gpio;
+       char *lcd_driver_name;
+       int lcd_pwren;
+} beagle_config = {
+       .mmc1_gpio_wp = -EINVAL,
+       .usb_pwr_level = GPIOF_OUT_INIT_LOW,
+       .reset_gpio = 129,
+       .usr_button_gpio = 4,
+       .lcd_driver_name = "",
+       .lcd_pwren = 156
+};
+
 static void __init omap3_beagle_init_rev(void)
 {
 	int ret;
@@ -352,6 +372,7 @@ static struct mtd_partition omap3beagle_nand_partitions[] = {
 	},
 };
 
+
 static struct omap_nand_platform_data omap3beagle_nand_data = {
 	.options	= NAND_BUSWIDTH_16,
 	.parts		= omap3beagle_nand_partitions,
@@ -399,15 +420,56 @@ static struct omap_dss_device beagle_tv_device = {
 	.phy.venc.type = OMAP_DSS_VENC_TYPE_SVIDEO,
 };
 
+
+static int beagle_enable_lcd(struct omap_dss_device *dssdev)
+{
+
+       if (gpio_is_valid(beagle_config.lcd_pwren)){
+               printk(KERN_INFO "%s: Enabling LCD\n", __FUNCTION__);
+               gpio_set_value(beagle_config.lcd_pwren, 0);
+       }       
+       else {
+               printk(KERN_INFO "%s: Invalid LCD enable GPIO: %d\n", 
+                       __FUNCTION__, beagle_config.lcd_pwren);
+       }
+
+       return 0;
+}
+
+static void beagle_disable_lcd(struct omap_dss_device *dssdev)
+{
+       if (gpio_is_valid(beagle_config.lcd_pwren)){
+               printk(KERN_INFO "%s: Disabling LCD\n", __FUNCTION__);
+               gpio_set_value(beagle_config.lcd_pwren, 1);
+       }       
+       else {
+               printk(KERN_INFO "%s: Invalid LCD enable GPIO: %d\n", 
+                       __FUNCTION__, beagle_config.lcd_pwren);
+       }
+
+       return;
+}
+
+static struct omap_dss_device beagle_lcd_device = {
+       .name                   = "lcd",
+       .driver_name            = "",
+       .type                   = OMAP_DISPLAY_TYPE_DPI,
+       .phy.dpi.data_lines     = 24,
+       .platform_enable        = beagle_enable_lcd,
+       .platform_disable       = beagle_disable_lcd,
+};
+
+
 static struct omap_dss_device *beagle_dss_devices[] = {
 	&beagle_dvi_device,
 	&beagle_tv_device,
+	&beagle_lcd_device,
 };
 
 static struct omap_dss_board_info beagle_dss_data = {
 	.num_devices = ARRAY_SIZE(beagle_dss_devices),
 	.devices = beagle_dss_devices,
-	.default_device = &beagle_dvi_device,
+	.default_device = &beagle_lcd_device,
 };
 
 static struct regulator_consumer_supply beagle_vdac_supply =
@@ -421,7 +483,7 @@ static struct regulator_consumer_supply beagle_vdvi_supplies[] = {
 static void __init beagle_display_init(void)
 {
 	int r;
-
+#if 0
 	r = gpio_request(beagle_dvi_device.reset_gpio, "DVI reset");
 	if (r < 0) {
 		printk(KERN_ERR "Unable to get DVI reset GPIO\n");
@@ -429,6 +491,18 @@ static void __init beagle_display_init(void)
 	}
 
 	gpio_direction_output(beagle_dvi_device.reset_gpio, 0);
+#else
+
+       r = gpio_request_one(beagle_config.lcd_pwren, GPIOF_OUT_INIT_LOW,
+                            "LCD power");
+       if (r < 0)
+               printk(KERN_ERR "Unable to get LCD power enable GPIO\n");
+
+       r = gpio_request_one(beagle_dvi_device.reset_gpio, GPIOF_OUT_INIT_LOW,
+                            "DVI reset");
+       if (r < 0)
+               printk(KERN_ERR "Unable to get DVI reset GPIO\n");
+#endif
 }
 
 #include "sdram-micron-mt46h32m32lf-6.h"
@@ -723,17 +797,19 @@ static struct i2c_board_info __initdata beagle_i2c_eeprom[] = {
        },
 };
 
-#if defined(CONFIG_RTC_DRV_DS1307) || \
-	defined(CONFIG_RTC_DRV_DS1307_MODULE)
+
 
 static struct i2c_board_info __initdata beagle_i2c2_boardinfo[] = {
 	{
+		I2C_BOARD_INFO("tlc59108", 0x40),
+	},
+#if defined(CONFIG_RTC_DRV_DS1307) || \
+	defined(CONFIG_RTC_DRV_DS1307_MODULE) 
+	{
 		I2C_BOARD_INFO("ds1307", 0x68),
 	},
-};
-#else
-static struct i2c_board_info __initdata beagle_i2c2_boardinfo[] = {};
 #endif
+};
 
 static int __init omap3_beagle_i2c_init(void)
 {
@@ -950,6 +1026,10 @@ static void __init omap3_beagle_init(void)
 		gpio_buttons[0].gpio = 4;
 	}
 
+	/* TODO: set lcd_driver_name by command line or device tree */
+	beagle_config.lcd_driver_name = "tfc_s9700_panel";
+	beagle_lcd_device.driver_name = beagle_config.lcd_driver_name;
+
 	platform_add_devices(omap3_beagle_devices,
 			ARRAY_SIZE(omap3_beagle_devices));
 	omap_display_init(&beagle_dss_data);
diff --git a/drivers/video/omap2/displays/Kconfig b/drivers/video/omap2/displays/Kconfig
index 609a280..d32c64d 100644
--- a/drivers/video/omap2/displays/Kconfig
+++ b/drivers/video/omap2/displays/Kconfig
@@ -1,6 +1,12 @@
 menu "OMAP2/3 Display Device Drivers"
         depends on OMAP2_DSS
 
+config PANEL_TFCS9700RTWV35TR01B
+        tristate "TFC S9700RTWV35TR01B"
+        depends on OMAP2_DSS
+        help
+          LCD Panel used on BeagleboardToys 800x480 LCD Expansion Module
+
 config PANEL_GENERIC_DPI
         tristate "Generic DPI Panel"
 	depends on OMAP2_DSS_DPI
diff --git a/drivers/video/omap2/displays/Makefile b/drivers/video/omap2/displays/Makefile
index 0f601ab..b69cd82 100644
--- a/drivers/video/omap2/displays/Makefile
+++ b/drivers/video/omap2/displays/Makefile
@@ -6,3 +6,5 @@ obj-$(CONFIG_PANEL_NEC_NL8048HL11_01B) += panel-nec-nl8048hl11-01b.o
 obj-$(CONFIG_PANEL_TAAL) += panel-taal.o
 obj-$(CONFIG_PANEL_TPO_TD043MTEA1) += panel-tpo-td043mtea1.o
 obj-$(CONFIG_PANEL_ACX565AKM) += panel-acx565akm.o
+obj-$(CONFIG_PANEL_TFCS9700RTWV35TR01B) += panel-tfc-s9700rtwv35tr01b.o
+
diff --git a/drivers/video/omap2/displays/panel-tfc-s9700rtwv35tr01b.c b/drivers/video/omap2/displays/panel-tfc-s9700rtwv35tr01b.c
new file mode 100644
index 0000000..227ac38
--- /dev/null
+++ b/drivers/video/omap2/displays/panel-tfc-s9700rtwv35tr01b.c
@@ -0,0 +1,147 @@
+/*
+ * LCD panel driver for TFC S9700RTWV35TR-01B
+ *
+ * Copyright (C) 2011 Texas Instruments Inc
+ * Author: Roger Monk <r-monk@ti.com>
+ * From Original by : Vaibhav Hiremath <hvaibhav@ti.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/err.h>
+
+#include <plat/display.h>
+
+
+static struct omap_video_timings tfc_timings = {
+	.x_res		= 800,
+	.y_res		= 480,
+
+	.pixel_clock	= 30000,
+
+	.hsw		= 49,
+	.hfp		= 41,
+	.hbp		= 40,
+
+	.vsw		= 4,
+	.vfp		= 14,
+	.vbp		= 29,
+};
+
+static int tfc_panel_probe(struct omap_dss_device *dssdev)
+{
+	dssdev->panel.config = OMAP_DSS_LCD_TFT | OMAP_DSS_LCD_IVS |
+		OMAP_DSS_LCD_IHS; // | OMAP_DSS_LCD_IEO; - TODO check this - doesn't work with this enabled
+	dssdev->panel.acb = 0x0;
+	dssdev->panel.timings = tfc_timings;
+
+	return 0;
+}
+
+static void tfc_panel_remove(struct omap_dss_device *dssdev)
+{
+}
+
+static int tfc_panel_enable(struct omap_dss_device *dssdev)
+{
+	int r = 0;
+
+	if (dssdev->state == OMAP_DSS_DISPLAY_ACTIVE)
+                return 0;
+
+        r = omapdss_dpi_display_enable(dssdev);
+        if (r)
+                goto err0;
+
+	/* wait couple of vsyncs until enabling the LCD */
+	msleep(50);
+
+	if (dssdev->platform_enable){
+		r = dssdev->platform_enable(dssdev);
+		if(r)
+			goto err1;
+	}
+
+	return 0;
+err1:	
+	omapdss_dpi_display_disable(dssdev);
+err0:
+	dssdev->state = OMAP_DSS_DISPLAY_ACTIVE;
+	return r;
+}
+
+static void tfc_panel_disable(struct omap_dss_device *dssdev)
+{
+        if (dssdev->state != OMAP_DSS_DISPLAY_ACTIVE)
+                return;
+
+	if (dssdev->platform_disable)
+		dssdev->platform_disable(dssdev);
+
+	/* wait at least 5 vsyncs after disabling the LCD */
+
+	msleep(100);
+
+	omapdss_dpi_display_disable(dssdev);
+
+	dssdev->state = OMAP_DSS_DISPLAY_DISABLED;
+}
+
+static int tfc_panel_suspend(struct omap_dss_device *dssdev)
+{
+	tfc_panel_disable(dssdev);
+	return 0;
+}
+
+static int tfc_panel_resume(struct omap_dss_device *dssdev)
+{
+	return tfc_panel_enable(dssdev);
+}
+
+static void tfc_panel_get_timings(struct omap_dss_device *dssdev,
+		            struct omap_video_timings *timings)
+{
+	    *timings = dssdev->panel.timings;
+}
+
+static struct omap_dss_driver tfc_s9700_driver = {
+	.probe		= tfc_panel_probe,
+	.remove		= tfc_panel_remove,
+
+	.enable		= tfc_panel_enable,
+	.disable	= tfc_panel_disable,
+	.suspend	= tfc_panel_suspend,
+	.resume		= tfc_panel_resume,
+	.get_timings = tfc_panel_get_timings,
+	.driver         = {
+		.name   = "tfc_s9700_panel",
+		.owner  = THIS_MODULE,
+	},
+};
+
+static int __init tfc_panel_drv_init(void)
+{
+	return omap_dss_register_driver(&tfc_s9700_driver);
+}
+
+static void __exit tfc_panel_drv_exit(void)
+{
+	omap_dss_unregister_driver(&tfc_s9700_driver);
+}
+
+module_init(tfc_panel_drv_init);
+module_exit(tfc_panel_drv_exit);
+MODULE_LICENSE("GPL");
